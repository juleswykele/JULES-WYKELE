; (function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
            window.Cookies = OldCookies;
            return api;
        };
    }
}(function () {
    function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
            var attributes = arguments[i];
            for (var key in attributes) {
                result[key] = attributes[key];
            }
        }
        return result;
    }

    function init(converter) {
        function api(key, value, attributes) {
            var result;
            if (typeof document === 'undefined') {
                return;
            }

            // Write

            if (arguments.length > 1) {
                attributes = extend({
                    path: '/'
                }, api.defaults, attributes);

                if (typeof attributes.expires === 'number') {
                    var expires = new Date();
                    expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
                    attributes.expires = expires;
                }

                try {
                    result = JSON.stringify(value);
                    if (/^[\{\[]/.test(result)) {
                        value = result;
                    }
                } catch (e) { }

                if (!converter.write) {
                    value = encodeURIComponent(String(value))
                        .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                } else {
                    value = converter.write(value, key);
                }

                key = encodeURIComponent(String(key));
                key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
                key = key.replace(/[\(\)]/g, escape);

                return (document.cookie = [
                    key, '=', value,
                    attributes.expires ? '; expires=' + attributes.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                    attributes.path ? '; path=' + attributes.path : '',
                    attributes.domain ? '; domain=' + attributes.domain : '',
                    attributes.secure ? '; secure' : ''
                ].join(''));
            }

            // Read

            if (!key) {
                result = {};
            }

            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all. Also prevents odd result when
            // calling "get()"
            var cookies = document.cookie ? document.cookie.split('; ') : [];
            var rdecode = /(%[0-9A-Z]{2})+/g;
            var i = 0;

            for (; i < cookies.length; i++) {
                var parts = cookies[i].split('=');
                var cookie = parts.slice(1).join('=');

                if (cookie.charAt(0) === '"') {
                    cookie = cookie.slice(1, -1);
                }

                try {
                    var name = parts[0].replace(rdecode, decodeURIComponent);
                    cookie = converter.read ?
                        converter.read(cookie, name) : converter(cookie, name) ||
                        cookie.replace(rdecode, decodeURIComponent);

                    if (this.json) {
                        try {
                            cookie = JSON.parse(cookie);
                        } catch (e) { }
                    }

                    if (key === name) {
                        result = cookie;
                        break;
                    }

                    if (!key) {
                        result[name] = cookie;
                    }
                } catch (e) { }
            }

            return result;
        }

        api.set = api;
        api.get = function (key) {
            return api(key);
        };
        api.getJSON = function () {
            return api.apply({
                json: true
            }, [].slice.call(arguments));
        };
        api.defaults = {};

        api.remove = function (key, attributes) {
            api(key, '', extend(attributes, {
                expires: -1
            }));
        };

        api.withConverter = init;

        return api;
    }

    return init(function () { });
}));

(function () {
    var getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = decodeURIComponent(window.location.search.substring(1)),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
    };

    var popup = null;
    var visme_campaign = getUrlParameter("vc");
    if (typeof visme_campaign == "undefined") {
        visme_campaign = Cookies.get("vcid");
    }
    else {
        Cookies.set("vcid", visme_campaign, { domain: '.visme.co' });
    }

    addEventListener('ewc-register-popup', function (e) {
        if (!popup) {
            popup = document.createElement("div");
            popup.setAttribute("id", "ewc-register-popup");
            popup.style.width = '100%';
            popup.style.height = '100%';
            popup.style.position = 'fixed';
            popup.style.left = '0px';
            popup.style.top = '0px';
            popup.style.zIndex = '10';
            popup.style.display = 'none';
            document.body.appendChild(popup);

            function updateLayout() {
                popup.style.height = window.innerHeight + 'px';
            }
            addEventListener('resize', updateLayout);
            updateLayout();
        }

        var target = "https://dashboard.visme.co/v2/register";
        if (typeof visme_project_type != "undefined" && visme_project_type != "") {
            target = "https://dashboard.visme.co/visme/create-project/" + visme_project_type;
        }
        var src = "https://dashboard.visme.co/api/auth/redirect?mode=register&uri=" + encodeURI(target);

        popup.innerHTML = "<iframe border='0' frameBorder='0' allowTransparency='true' style='border-width: 0px; background-color: transparent; width: 100%; height: 100%; overflow: hidden;' src='" + src + "'></iframe>";
        popup.style.display = 'block';
    });

    function hidePopup() {
        if (!popup) return;
        popup.style.display = 'none';
        popup.innerHTML = '';
    }

    addEventListener('message', function (e) {
        if (!e || e.origin != 'https://dashboard.visme.co') return;
        if (e.data == "ewc-close") {
            hidePopup();
        }
        if (e.data == "ewc-login") {
            if (document.querySelector('#login-box-inner')) {
                hidePopup();
            }
            else {
                window.location = "https://dashboard.visme.co/login";
            }
        }
        if (e.data.split) {
            var parts = e.data.split('||', 2);
            if (parts[0] == "nav") {
                window.location = parts[1];
            }
        }
    });
})();

function EWCTriggerPopup() {
    window.dispatchEvent(new Event("ewc-register-popup"));
}
